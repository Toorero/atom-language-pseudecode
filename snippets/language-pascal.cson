'.source.pascal':
  'begin … end':
    'prefix': 'begin'
    'body': 'begin\n\t$0\nend;'
  'case … end':
    'prefix': 'case'
    'body': 'case ${1:true} of\n\t$0\nend;'
  'class (no parts)':
    'prefix': 'classd'
    'body': 'T${1:ClassName} = class(T${2:ancestor})\n\t$0\nend;'
  'class (with Create/Destroy)':
    'prefix': 'classc'
    'body': 'T${1:ClassName} = class(T${2:ancestor})\nprivate\n\t$0\nprotected\n\t\npublic\n\tconstructor Create; override;\n\tdestructor Destroy; override;\npublished\n\t\nend;'
  'class full (commented)':
    'prefix': 'classfc'
    'body': 'T${1:ClassName} = class(T${2:ancestor})\nprivate\n\t{ private declarations }\n\t$0\nprotected\n\t{ protected declarations }\n\t\npublic\n\t{ public declarations }\n\t\npublished\n\t{ published declarations }\n\t\nend;'
  'class full (uncommented)':
    'prefix': 'classfu'
    'body': 'T${1:ClassName} = class(T${2:ancestor})\nprivate\n\t$0\nprotected\n\t\npublic\n\t\npublished\n\t\nend;'
  'constructor descendant':
    'prefix': 'CreateC'
    'body': 'constructor Create(AOwner: TComponent); override;'
  'constructor':
    'prefix': 'constructorc'
    'body': 'constructor Create(${1:params}); ${2:override;}'
  'constructor … destructor':
    'prefix': 'constructord'
    'body': 'constructor Create(${1:params});\ndestructor Destroy; override;$0'
  'destructor':
    'prefix': 'destructor'
    'body': 'destructor Destroy; override;$0'
  'else … end':
    'prefix': 'else'
    'body': 'else\nbegin\n\t$0\nend;'
  'enum':
    'prefix': 'enum'
    'body': 'T${1:EnumName} = (${2:meOne}, $0);'
  'for … begin end':
    'prefix': 'forb'
    'body': 'for ${1:i} := ${2:0} to ${3:max} do\nbegin\n\t$0\nend;'
  'for in … end':
    'prefix': 'forin'
    'body': 'for ${1:MyElem} in ${2:MyList} do\nbegin\n\t$0\nend;'
  'for downto … end':
    'prefix': 'forr'
    'body': 'for ${1:i} := ${2:max} downto ${3:0} do\nbegin\n\t$0\nend;'
  'for … (no begin end)':
    'prefix': 'for'
    'body': 'for ${1:i} := ${2:0} to ${3:max} do\n\t$0'
  'function … end':
    'prefix': 'function'
    'body': 'function ${1:MyFunction}(${2:params}:${3:integer};\nbegin\n\t$0\nend;'
  'if … (no begin end)':
    'prefix': 'if'
    'body': 'if ${1:True} then\n\t$0'
  'if … end':
    'prefix': 'ifb'
    'body': 'if ${1:True} then\nbegin\n\t$0\nend;'
  'if … else (no begin end)':
    'prefix': 'ife'
    'body': 'if ${1:True} then\n\t${2:then code here}\nelse\n\t${3:else code here}\n'
  'if … else end':
    'prefix': 'ifeb'
    'body': 'if ${1:True} then\nbegin\n\t${2:then code here}\nend\nelse\nbegin\n\t${3:else code here}\nend;'
  'if not Assigned … (no begin end)':
    'prefix': 'ifnass'
    'body': 'if not Assigned(${1:variable}) then\n\t${1:variable} := T${2:ClassName}.Create(${3:params});$0'
  'if nil … (no begin end)':
    'prefix': 'ifnil'
    'body': 'if ${1:variable} = nil then\n\t${1:variable} := T${2:ClassName}.Create(${3:params});$0'
  'procedure':
    'prefix': 'procedure'
    'body': 'procedure ${1:MyProcedure}(${2:params};\nbegin\n\t$0\nend;'
  'property getter':
    'prefix': 'prop'
    'body': 'property ${1:name}: ${2:type} read ${3:getter} write ${4:setter};$0'
  'property field':
    'prefix': 'propf'
    'body': 'property ${1:name}: ${2:type} read F${1:name} write F${1:name};$0'
  'property get set':
    'prefix': 'propgs'
    'body': 'property ${1:name}: ${2:type} read Get${1:name} write Set${1:name};$0'
  'property read only':
    'prefix': 'propro'
    'body': 'property ${1:name}: ${2:type} read ${3:getter};$0'
  'property read only field':
    'prefix': 'proprof'
    'body': 'property ${1:name}: ${2:type} read F${1:name};$0'
  'raise':
    'prefix': 'raise'
    'body': 'raise ${1:Exception}.Create(\'${2:Error Message}\');$0'
  'region':
    'prefix': 'region'
    'body': '{$REGION \'${1:MyRegion}\'}\n\t$0\n{$ENDREGION}'
  'repeat until':
    'prefix': 'repeat'
    'body': 'repeat\n\t$0\nuntil (${1:True});'
  'try object … finally':
    'prefix': 'try'
    'body': '${1:variable} := ${2:TComponent}.Create(${3:params});\ntry\n\t$0\nfinally\n\t${1:variable}\nend;'
  'try … finally':
    'prefix': 'tryf'
    'body': 'try\n\t$0\nfinally\n\t$1\nend;'
  'try … except':
    'prefix': 'trye'
    'body': 'try\n\t$0\nexcept\n\ton ${1:e}: ${2:Exception} do\nend;'
  'variable':
    'prefix': 'var'
    'body': '${1:variable}: ${2:type};$0'
  'unit … implementation … end':
    'prefix': 'unit'
    'body': 'unit ${1:unit_name};\n\ninterface\n\nuses\n\tSysUtils${2:, Classes};\n\nimplementation\n\n$0\n\nend.'
